Static linking theory:

When we link a program statically, we include all the necessary libraries during the compilation phase to create a standalone executable.
Thus, everything that is needed to run the program is included in the executable.

Obviously, this has a negative impact on the file size: The libraries included could very well be included in another program for example.
In such a situation they may be reused if they were dynamically linked.

A statically linked program will start faster than a dynamically linked program, because everything is embedded in the executable
and it does not need to resolve dependencies. The runtime performance is not significantly impacted but in theory, statically linked programs
can be a little bit faster than dynamically linked.

Memory-wise, a statically linked program may consume more memory since it keeps all the libraries in memory. If we were to run several instances
of the program, we would thus have several copies of an included library loaded into memory. This could be prevented if the program instead
used dynamically linked libraries.

Optimisation-wise, a statically included library could in theory be optimised more aggressively than a dynamically linked library. However, 
this is probably not a significant factor.

Compatibility/portability: Here static linking wins, because everything is included in the binary. There is no need to worry about whether
the user has the correct version of the library installed. There may be significant differences between libraries for different OS:s,
for example.
